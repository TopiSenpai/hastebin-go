package templates

import (
	"fmt"
	"strconv"
)

func WriteUnsafe(str string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := w.Write([]byte(str))
		return err
	})
}

type DocumentVars struct {
	ID        string
    Version   int64
    Content   string
    Formatted string
    CSS       string
    ThemeCSS  string
    Language  string

    Versions []Version
    Lexers   []string
    Styles   []Style
    Style    string
    Theme    string

    Max        int
    Host       string
    Preview    bool
    PreviewAlt string
}

func (v DocumentVars) GetThemeCSS() string {
	return fmt.Sprintf(`
	<style id="theme-style">
%s
	</style>
	`, v.ThemeCSS)
}

func (v DocumentVars) GetCSS() string {
	return fmt.Sprintf(`
	<style id="code-style">
%s
	</style>
	`, v.CSS)
}

type Version struct {
	Version int64
	Label   string
	Time    string
}

type Style struct {
	Name  string
	Theme string
}

func (v DocumentVars) PreviewURL() string {
	url := "https://" + v.Host + "/" + v.ID
	if v.Version > 0 {
		url += "/" + strconv.FormatInt(v.Version, 10)
	}
	return url + "/preview"
}

func (v DocumentVars) URL() string {
	return "https://" + v.Host
}

templ Document(vars DocumentVars) {
	<!DOCTYPE html>
    <html lang="en" class={ vars.Theme }>
    @head(vars)
    <body>
    <div id="error-popup" style="display: none;"></div>
    <dialog id="share-dialog">
        <div class="share-dialog-header">
            <h2>Share</h2>
            <button id="share-dialog-close" class="icon-btn"></button>
        </div>
        <p>Share this URL with your friends and let them edit or delete the document.</p>
        <h3>Permissions</h3>
        <div class="share-dialog-main">
            <div class="share-dialog-permissions">
                <label for="share-permissions-write">Write</label>
                <input id="share-permissions-write" type="checkbox"/>

                <label for="share-permissions-delete">Delete</label>
                <input id="share-permissions-delete" type="checkbox"/>

                <label for="share-permissions-share">Share</label>
                <input id="share-permissions-share" type="checkbox"/>
            </div>
            <button id="share-copy">Copy</button>
        </div>
    </dialog>
    @header(vars)
    <main>
        <div class="settings">
            <div class="first">
                <select title="Language" id="language" autocomplete="off">
                    <option value="auto" selected?={ vars.Language == "" }>auto</option>
                    for _, lexer := range vars.Lexers {
                        <option value={ lexer } selected?={ vars.Language == lexer }>{ lexer }</option>
                    }
                </select>
                <select title="Style" id="style" autocomplete="off">
                    for _, style := range vars.Styles {
                        <option value={ style.Name } data-theme={ style.Theme } selected?={ vars.Style == style.Name }>{ style.Name }</option>
                    }
                </select>
            </div>
            <select title="Versions" id="version" autocomplete="off">
                for _, version := range vars.Versions {
                    <option title={ version.Time } value={ strconv.FormatInt(version.Version, 10) } selected?={ version.Version == vars.Version }>{ version.Label }</option>
                }
            </select>
        </div>
        <pre id="code"
            if vars.ID == "" {
                style="display: none;"
            }
        ><code id="code-view" class="ch-chroma">@WriteUnsafe(vars.Formatted)</code></pre>
        <textarea id="code-edit" spellcheck="false"
            if  vars.ID != "" {
	            style="display: none;"
            }
            autocomplete="off">{ vars.Content }</textarea>
        <label for="code-edit">
            <span id="code-edit-count">{ strconv.Itoa(len(vars.Content)) }</span>
            if vars.Max > 0 {
                /<span id="code-edit-max">{ strconv.Itoa(vars.Max) }</span>
            }
        </label>
    </main>
    <script src="/assets/script.js" defer></script>
    </body>
    </html>
}